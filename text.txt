코딩 재활 | 코딩애플 git과 github 배우기

깃의 단계:
코드 -> 스테이징 -> 레포지토리

git add (파일명) : 입력한 파일을 스테이징합니다. (git add . 를 입력하면 전체 파일을 스테이징합니다.)
git commit -m "메세지" : 입력한 메세지와 함께 커밋을 합니다.
* git commit -am "메세지" : 수정된 모든 파일을 추가하고, 커밋합니다. (단, 처음 파일을 생성한 경우에는 git add를 사용하여 수동으로 추가해줘야합니다.)

git status : 스테이징한 파일을 확인합니다.
git log --all --oneline : 커밋의 로그를 확인힙니다. (q로 종료합니다.)
git log --oneline --graph --all : 로그를 그래프로 볼 수 도 있음. (입력시 부가 옵션들의 순서는 상관이 없습니다.)

커밋할때 최근 커밋과 지금 수정한 파일의 차이점을 확인하고 하면 좋은데, 이걸 도와주는 기능들이 있습니다.
git diff : 터미널에서 보여주는데 가독성이 좋지 않아 사용하지 않습니다. 방향기 hjkl로 조작하며, q로 종료합니다.
git difftool: diff보단 이걸 사용합니다. 방향키 hjkl로 조작하며, :q 또는 :qa로 종료합니다. 콜론 꼭 붙여야합니다! 

git difftool (커밋 아이디) : 해당 아이디에 속한 커밋과 현재 파일을 비교합니다.
git difftool (커밋 아이디) (커밋 아이디): 커밋간 비교를 할 수도 있습니다.

사실 difftool을 사용하는 것 보단, vsc에 깔아둔 git graph를 사용하는 것이 편리합니다.

git branch (브랜치명) : 브랜치를 입력된 이름으로 새로 만듭니다.
git switch (브랜치명) : 입력된 브랜치로 전환합니다. (브랜치 전환 전, 브랜치 내에 변경점을 먼저 커밋해야 합니다.)
git branch -d (브랜치명) : 입력된 브랜치를 삭제합니다. (merge 후엔 일반적으로 합친 브랜치를 삭제합니다.)
git branch -D (브랜치명) : merge를 하지 않은 브랜치는 대문자 D를 사용하여 삭제합니다.

git merge (브랜치명) : 현재 속해있는 브랜치에서 입력한 브랜치를 합칩니다.

merge 중 충돌 발생시, 에디터에서 충돌점들을 수정한다음 파일을 스테이징하고 커밋하면 됩니다.

- merge의 종류 -

1. 3-way merge
기준 브랜치와 합칠 브랜치에 각각 새로운 커밋이 있는 경우 3-way merge가 실행됩니다.

2. Fast-forward merge
기준 브랜치에 새로운 커밋이 없는 상태에서 합칠 브랜치에 새로운 커밋이 존재하는 경우, 합칠 브랜치를 기준 브랜치로 선언하고 Fast-forward merge가 실행됩니다.
(git merge --no-ff로 막을 수 있습니다.)

3. rebase merge
합칠 브랜치의 시작점을 기준 브랜치의 최근 커밋으로 옮긴후, Fast-forward merge를 실행하여 결합합니다.
(다수의 브랜치가 존재하는 상황에서, 3-way merge만을 사용하여 결합하면 로그가 다소 복잡해집니다. 이를 해결하기 위해 간단한 브랜치는 rebase를 사용하여 결합하면 깔끔하게 정리가 가능합니다.
단, conflict가 발생할 확률이 매우 높다는 단점이 존재합니다.)

- rebase merge의 실행 순서
1. 합칠 브랜치로 이동합니다.
2. git rebase (기준 브랜치명)을 입력합니다. (합칠 브랜치의 시작점이 기준 브랜치의 최근 커밋으로 이동한다.)
3. 기준 브랜치로 이동한 후에, git merge (합칠 브랜치명)을 입력하여 merge 합니다.

4. squash & merge 
git merge --squash (브랜치명)을 입력하여 실행합니다.
rebase merge와는 다르게, 합칠 브랜치의 커밋을 기준 브랜치에 바로 적용하여 merge합니다.

git restore (파일명) : 해당 파일을 최근에 저장한 커밋으로 되돌립니다.
git restore --source (커밋아이디) (파일명) : 해당 파일을 입력된 커밋의 시점으로 되돌립니다.
git restore --staged (파일명) : 스테이징된 파일을 스테이징 취소합니다.
git revert (커밋아이디) : 입력된 커밋에서 일어난 변경점을 취소한뒤, 해당 내용 없이 커밋을 새로 만듭니다.
(git revert는 커밋 아이디를 여러개 입력하여 취소할 수 도 있고, HEAD를 입력하여 최근에 생성된 커밋을 취소할 수도 있습니다.)
git reset --hard (커밋 아이디) : 모든 변경점을 취소하고 입력된 커밋의 시점으로 되돌립니다. (위험한 기능이니 자주 쓰지 않는걸 권장합니다.)
git reset --soft (커밋 아이디) : 입력된 커밋의 시점으로 돌아가지만, 변경점들이 스테이징 상태로 남아있습니다.
git reset --mixed (커밋 아이디) : 입력된 커밋의 시점으로 돌아가지만, 변경점이 스테이징되지 않은 상태로 유지합니다.

git push -u (레포지토리 url) (올릴 브랜치명) : 입력한 깃허브 레포지토리에 선택한 브랜치를 올립니다.
(-u 옵션은 입력된 레포지토리 url을 저장합니다. 처음 이후는 git push만 입력해도 됩니다.)
git pull (레포지토리 url) (브랜치명) : 입력한 깃허브 레포지토리를 브랜치에 복사합니다. (충돌이 발생할 수도 있습니다.)
git remote add (변수명) (레포지토리 url) : 변수명에 레포지토리 url을 저장합니다.

* git push 할때 원격 레포지토리의 파일과 로컬의 레포지토리의 파일이 다르면 오류가 발생합니다. 
해당 문제를 해결할려면 git pull을 이용하여 원격 레포지토리의 파일을 다운받은 뒤, git push를 하면 됩니다.

git clone (레포지토리 url) : 입력된 레포지토리를 복제합니다.

다른 사람들과 협업을 할때에는 git push를 하다 사고가 발생하는 경우를 예방하기 위해, 개인용 branch를 만들어 개발하고 main 브랜치에 머지하는 경우가 대부분입니다.
branch를 만드는 방법은 github 사이트 또는 로컬에서 만든후에 푸시하면 됩니다.
추후 개인 브랜치와 main 브랜치를 머지할때 로컬에서 해도 되지만, 일반적으로 코드 리뷰를 위해 깃허브에서 머지를 진행합니다.
깃허브에서 머지를 하는 방법은 pull request를 사용하는 것으로, 사이트 내에서 충돌도 수정하고 커밋 메세지도 남기면서 진행할 수 있습니다.

브랜치 분류 전략:
1. GitFlow (Vincent Driessen)
Main, Develop, Feature, Release, Hotfix로 브랜치 구성됩니다.
Main: Main
Develop: Main의 사본이며, Feature 브랜치에서 개발된 요소들이 머지되는 곳입니다.
Feature: Develop 브랜치에서 개발을 하면 사고가 날 수 있기 때문에, 이 브랜치에서 기능들을 개발하고 Develop 브랜치에 머지합니다.
Release: Develop 브랜치에서 Main 브랜치로 머지하기 전에, 테스트하는 브랜치입니다. 테스트가 끝나면 Main & Develop 브랜치 모두에게 머지합니다.
Hotfix: Main 브랜치에서 치명적인 버그가 발생했고 Develop 브랜치까지 내려갈 여유가 없을때, Main 브랜치에서 바로 브랜치를 만들어 버그를 고친 후 머지합니다.

2. Trunk-based
Main 브랜치 하나로 구성되어 운영됩니다.
새로운 기능이 필요할때마다, Main 브랜치에서 Feature 브랜치를 만들고 기능을 개발한 후에 머지합니다.